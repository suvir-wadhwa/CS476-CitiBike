{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red255\green255\blue255;
\red255\green255\blue255;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c100000\c100000\c99895;
\cssrgb\c100000\c100000\c99956;\cssrgb\c100000\c100000\c99971;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \
val data2019 = spark.read.option("header", "true").csv("hdfs:///user/sw4854_nyu_edu/201809-citibike-tripdata.csv")\
\
val data2023 = spark.read.option("header", "true").csv("hdfs:///user/sw4854_nyu_edu/JC-202309-citibike-tripdata.csv")\
\
// Apply schema and clean data\
\
val bikeSchema = new StructType()\
  .add(StructField("ride_id", StringType, true))\
  .add(StructField("rideable_type", StringType, true))\
  .add(StructField("started_at", TimestampType, true))\
  .add(StructField("ended_at", TimestampType, true))\
  .add(StructField("start_station_name", StringType, true))\
  .add(StructField("start_station_id", StringType, true))\
  .add(StructField("end_station_name", StringType, true))\
  .add(StructField("end_station_id", StringType, true))\
  .add(StructField("start_lat", DoubleType, true))\
  .add(StructField("start_lng", DoubleType, true))\
  .add(StructField("end_lat", DoubleType, true))\
  .add(StructField("end_lng", DoubleType, true))\
  .add(StructField("member_casual", StringType, true))\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
// Apply schema and clean data\cf2 \
val cleanedDf2019 = df2019.selectExpr("cast(ride_id as string)", "cast(rideable_type as string)", \
                                      "cast(started_at as timestamp)", "cast(ended_at as timestamp)", \
                                      "cast(start_station_name as string)", "cast(start_station_id as string)", \
                                      "cast(end_station_name as string)", "cast(end_station_id as string)", \
                                      "cast(start_lat as double)", "cast(start_lng as double)", \
                                      "cast(end_lat as double)", "cast(end_lng as double)", \
                                      "cast(member_casual as string)")\
val cleanedDf2023 = df2023.selectExpr("cast(ride_id as string)", "cast(rideable_type as string)", \
                                      "cast(started_at as timestamp)", "cast(ended_at as timestamp)", \
                                      "cast(start_station_name as string)", "cast(start_station_id as string)", \
                                      "cast(end_station_name as string)", "cast(end_station_id as string)", \
                                      "cast(start_lat as double)", "cast(start_lng as double)", \
                                      "cast(end_lat as double)", "cast(end_lng as double)", \
                                      "cast(member_casual as string)")\
\
data2019.printSchema()\
\
val cleanedDf2019 = data2019.selectExpr(\
     |   "cast(`tripduration` as string) as `ride_id`", // Assuming tripduration can serve as ride_id\
     |   "cast(`usertype` as string) as `rideable_type`",\
     |   "cast(`starttime` as timestamp) as `started_at`",\
     |   "cast(`stoptime` as timestamp) as `ended_at`",\
     |   "cast(`start station name` as string) as `start_station_name`",\
     |   "cast(`start station id` as string) as `start_station_id`",\
     |   "cast(`end station name` as string) as `end_station_name`",\
     |   "cast(`end station id` as string) as `end_station_id`",\
     |   "cast(`start station latitude` as double) as `start_lat`",\
     |   "cast(`start station longitude` as double) as `start_lng`",\
     |   "cast(`end station latitude` as double) as `end_lat`",\
     |   "cast(`end station longitude` as double) as `end_lng`",\
     |   "cast(`bikeid` as string) as `member_casual`" // Adjust as per your data context\
     | )\
\
cleanedDf2019.describe().show()\
\
cleanedDf2023.describe().show()\
\
\
// Analysis 1: Count of rides per year\
\
val count2019 = cleanedDf2019.count()\
count2019: Long = 1877884\
\
val count2023 = cleanedDf2023.count()\
count2023: Long = 94233\
\
// Analysis 2: Most popular stations\
\
val popularStations2019 = cleanedDf2019.groupBy("start_station_name").count().orderBy(desc("count"))\
\
val popularStations2023 = cleanedDf2023.groupBy("start_station_name").count().orderBy(desc("count"))\
\
popularStations2019.show()\
\
popularStations2023.show()\
\
// Analysis 3: Membership type distribution\
\
val memberType2019 = cleanedDf2019.groupBy("member_casual").count()\
\
val memberType2023 = cleanedDf2023.groupBy("member_casual").count()\
\
memberType2019.show()\
\
memberType2023.show()\
\
// Analysis 4: Trip Durations\
\
val cleanedDf2019WithDuration = cleanedDf2019.withColumn("trip_duration", unix_timestamp($"ended_at") - unix_timestamp($"started_at"))\
\
val cleanedDf2023WithDuration = cleanedDf2023.withColumn("trip_duration", unix_timestamp($"ended_at") - unix_timestamp($"started_at"))\
\
// For 2019 Data\
cleanedDf2019WithDuration.groupBy("trip_duration").count().orderBy(desc("count")).show()\
\
cleanedDf2019WithDuration.select(avg($"trip_duration")).show()\
\
// For 2023 Data\
\
cleanedDf2023WithDuration.groupBy("trip_duration").count().orderBy(desc("count")).show()\
\
cleanedDf2023WithDuration.select(avg($"trip_duration")).show()\
\
// Analysis 5 - Extracting the hour from the timestamp\
\
val cleanedDf2019WithHour = cleanedDf2019WithDuration.withColumn("start_hour", hour($"started_at"))\
\
val cleanedDf2023WithHour = cleanedDf2023WithDuration.withColumn("start_hour", hour($"started_at"))\
\
// Analysis 6 - Analyzing the distribution of rides across different hours of the day\
\
cleanedDf2019WithHour.groupBy("start_hour").count().orderBy("start_hour").show()\
\
cleanedDf2023WithHour.groupBy("start_hour").count().orderBy("start_hour").show()\
\
}